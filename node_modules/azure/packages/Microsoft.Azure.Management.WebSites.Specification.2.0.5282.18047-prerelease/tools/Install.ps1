# This file is used when the generated package is installed
# It adds a copy step from the package directory to the project
# directory so that the spec DLL is always available without
# having to be added to source control
param($installPath, $toolsPath, $package, $project)
    # Need to load MSBuild assembly if it's not loaded yet.
    Add-Type -AssemblyName 'Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'

    # Grab the loaded MSBuild project for the project
    $msbuild = [Microsoft.Build.Evaluation.ProjectCollection]::GlobalProjectCollection.GetLoadedProjects($project.FullName) | Select-Object -First 1

    # Find the spec dll - it's the only one in the tools folder
    $specDllPath = Get-ChildItem $toolsPath *.dll | Select-Object -First 1
    # Create relative path to our spec DLL, which is in the tools path
    $projectUri = new-object Uri($project.FullName, [System.UriKind]::Absolute)
    $specUri = new-object Uri($specDllPath.FullName, [System.UriKind]::Absolute)
    $relativePathToSpecDll = [System.Uri]::UnescapeDataString($projectUri.MakeRelativeUri($specUri).ToString()).Replace([System.IO.Path]::AltDirectorySeparatorChar, [System.IO.Path]::DirectorySeparatorChar)

    # Form name for our target - dll name minus the extension and dots
    $targetName = 'Copy' + $specDllPath.BaseName.Replace('.', '')

    # Remove any current copy targets - they get stacked up due to bugs in previous package versions
    $itemsToRemove += $msbuild.Xml.Targets | Where-Object { $_.Name -eq $targetName }

    # Remove the elements
    if ($itemsToRemove -and $itemsToRemove.length)
    {
        foreach ($itemToRemove in $itemsToRemove)
        {
            $msbuild.Xml.RemoveChild($itemToRemove) | out-null
        }
    }

    # Add a target to copy the spec DLL to the project directory as part of build
    $target = $msbuild.Xml.AddTarget($targetName)
    $target.BeforeTargets = 'GenerateCodeFromSpecs'

    $copyTask = $target.AddTask('Copy')
    $copyTask.SetParameter('SourceFiles', $relativePathToSpecDll)
    $copyTask.SetParameter('DestinationFolder', '.')

    $project.Save()
